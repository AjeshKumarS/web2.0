// flow-typed signature: e94426710f4b6d816853247b388a25c0
// flow-typed version: <<STUB>>/retail-ui_v0.34.0/flow_v0.90.0

/**
 * This is an autogenerated libdef stub for:
 *
 *   'retail-ui'
 *
 * Fill this stub out by replacing all the `any` types.
 *
 * Once filled out, we encourage you to share your work with the
 * community by sending a pull request to:
 * https://github.com/flowtype/flow-typed
 */

declare module "retail-ui/lib/LayoutEvents" {
    declare interface ILayoutEvents {
		emit: () => void;
	}
    declare export default ILayoutEvents;
}

declare type ButtonUse = "default" | "primary" | "success" | "danger" | "pay" | "link";

declare type ButtonSize = 'small' | 'medium' | 'large';

declare type PopupPosition =
    | "top left"
    | "top center"
    | "top right"
    | "right top"
    | "right middle"
    | "right bottom"
    | "bottom left"
    | "bottom center"
    | "bottom right"
    | "left top"
    | "left middle"
    | "left bottom";
declare type SpinnerType = "mini" | "normal" | "big";

declare module "retail-ui/components/Button" {
    declare type ButtonProps = {
        children?: React$Node,
        disabled?: boolean,
        icon?: React$Element<any>,
        loading?: boolean,
        onClick?: (evt: SyntheticEvent<HTMLButtonElement>) => void,
        use?: ButtonUse,
    };
    declare export default class Button extends React$Component<$Exact<ButtonProps>, void> {}
}

declare module "retail-ui/components/Center" {
    declare type CenterProps = {
        children?: React$Node,
    };
    declare export default class Center extends React$Component<$Exact<CenterProps>, void> {}
}

declare module "retail-ui/components/Checkbox" {
    declare type CheckboxProps = {
        checked?: boolean,
        children?: React$Node,
        onChange?: (evt: SyntheticEvent<HTMLInputElement>, value: boolean) => void,
    };
    declare export default class Checkbox extends React$Component<$Exact<CheckboxProps>, void> {}
}

declare module "retail-ui/components/ComboBox" {
    declare type ComboBoxProps<T> = {
        error?: boolean,
        getItems?: (query: string) => Promise<T[]>,
        onBlur?: () => void,
        onChange?: (
            evt: $Exact<{
                target: {
                    value: T,
                },
            }>,
            item: T
        ) => void,
        onFocus?: () => void,
        placeholder?: string,
        renderNotFound?: () => React$Node,
        value?: ?T,
        warning?: boolean,
        width?: string | number,
        renderItem?: ((item: T, state?: void | "hover" | "selected" | null | undefined) => React$Node)
    };
    declare export default class ComboBox<T> extends React$Component<$Exact<ComboBoxProps<T>>, void> {}
}

declare module "retail-ui/components/Dropdown" {
    declare type DropdownProps = {
        caption: React$Node,
        children?: React$Node,
        use?: ButtonUse,
    };
    declare export default class Dropdown extends React$Component<$Exact<DropdownProps>, void> {}
}

declare module "retail-ui/components/DropdownContainer/DropdownContainer" {
    declare type DropdownContainerProps = {
        align?: "left" | "right",
        children?: React$Node,
        disablePortal?: boolean,
        getParent: () => Element | Text | null,
        offsetY?: number,
        offsetX?: number,
    };
    declare export default class DropdownContainer extends React$Component<$Exact<DropdownContainerProps>, void> {}
}

declare module "retail-ui/components/Gapped" {
    declare type GappedProps = {
        children: React$Node,
        gap?: number,
        vertical?: boolean,
        verticalAlign?: "top" | "middle" | "baseline" | "bottom",
    };
    declare export default class Gapped extends React$Component<$Exact<GappedProps>, void> {}
}

declare module "retail-ui/components/Input" {
    declare type InputProps = {
        id?: string,
        borderless?: boolean,
        disabled?: boolean,
        mask?: ?string,
        value?: string,
        onChange?: (evt: SyntheticEvent<HTMLInputElement>, value: string) => void,
        onFocus?: (evt: SyntheticFocusEvent<HTMLInputElement>) => void,
        onBlur?: (evt: SyntheticFocusEvent<HTMLInputElement>) => void,
        onKeyDown?: (evt: SyntheticKeyboardEvent<HTMLInputElement>) => void,
        placeholder?: string,
        width?: string | number,
    };
    declare export default class Input extends React$Component<$Exact<InputProps>, void> {}
}

declare module "retail-ui/components/Link" {
    declare type LinkProps = {
        children?: React$Node,
        disabled?: boolean,
        href?: string,
        icon?: React$Element<any>,
        onClick?: (evt?: SyntheticMouseEvent<HTMLAnchorElement>) => void,
        target?: ?string,
        use?: "default" | "success" | "danger" | "grayed",
    };
    declare export default class Link extends React$Component<$Exact<LinkProps>, void> {}
}

declare module "retail-ui/components/Loader" {
    declare type LoaderProps = {
        active: boolean,
        caption?: React$Node,
        children?: React$Node,
        className?: string,
        type?: SpinnerType,
    };
    declare export default class Loader extends React$Component<$Exact<LoaderProps>, void> {}
}

declare module "retail-ui/components/MenuItem" {
    declare type MenuItemProps = {
        children?: React$Node,
        onClick?: (evt: SyntheticMouseEvent<HTMLElement>) => void,
    };
    declare export default class MenuItem extends React$Component<$Exact<MenuItemProps>, void> {}
}

declare module "retail-ui/components/Modal" {
    declare type ModalProps = {
        alignTop?: boolean;
        children?: React$Node;
        disableClose?: boolean;
        ignoreBackgroundClick?: boolean;
        noClose?: boolean;
        onClose?: () => void;
        width?: number | string;
    };
    declare type ModalHeaderProps = {
        children?: React$Node;
        close?: boolean;
        sticky: boolean;
    };
    declare type ModalBodyProps = {
        children?: React$Node;
    };
    declare type ModalFooterProps = {
        children?: React$Node;
        panel?: boolean;
        sticky: boolean;
    };
    declare export default class Modal extends React$Component<$Exact<ModalProps>, void> {
        static Header: Class<React$Component<$Exact<ModalHeaderProps>, void>>;
        static Body: Class<React$Component<$Exact<ModalBodyProps>, void>>;
        static Footer: Class<React$Component<$Exact<ModalFooterProps>, void>>;
    }
}

declare module "retail-ui/components/Paging" {
    declare interface ItemComponentProps {
        active: boolean;
        children?: React$Node;
        className: string;
        onClick: () => void;
        pageNumber: number | "forward";
        tabIndex: number;
    }
    declare type PagingProps = {
        activePage: number,
        component?: React$ComponentType<ItemComponentProps>,
        onPageChange: (pageNumber: number) => void,
        pagesCount: number,
        disabled?: boolean,
        strings?: {
            forward: string,
        },
        withoutNavigationHint?: boolean,
        caption?: string,
        useGlobalListener?: boolean,
    };
    declare export default class Paging extends React$Component<$Exact<PagingProps>, void> {}
}

declare module "retail-ui/components/Radio" {
    declare type RadioProps<T> = {
        checked?: boolean,
        children?: React$Node,
        value: T,
        onChange?: (event: SyntheticEvent<T>, value: T) => void;
    };
    declare export default class Radio<T> extends React$Component<$Exact<RadioProps<T>>, void> {}
}

declare module "retail-ui/components/RadioGroup" {
    declare type RadioGroupProps<T> = {
        children?: React$Node,
        defaultValue?: T,
        name?: string,
        onChange?: (evt: SyntheticEvent<T>, value: T) => any,
    };
    declare export default class RadioGroup<T> extends React$Component<$Exact<RadioGroupProps<T>>, void> {}
}

declare module "retail-ui/components/RenderLayer" {
    declare type RenderLayerProps = {
		active?: boolean;
		children: React$Node;
	    onClickOutside?: (evt: SyntheticEvent<>) => void;
	    onFocusOutside?: (evt: SyntheticEvent<>) => void;
	};
    declare export default class RenderLayer extends React$Component<$Exact<RenderLayerProps>, void> {}
}

declare module "retail-ui/components/Select" {
    declare type SelectProps<TValue, TItem> = {
	    defaultValue?: TValue;
	    disablePortal?: boolean;
	    disabled?: boolean;
	    error?: boolean;
	    filterItem?: (value: TValue, item: TItem, pattern: string) => boolean;
	    items?: Array<[TValue, TItem] | TItem | React$Element<any> | (() => React$Element<any>)>;
	    maxMenuHeight?: number;
	    maxWidth?: string | number;
	    menuAlign?: 'left' | 'right';
	    menuWidth?: string | number;
	    onChange?: (evt: {
	        target: {
	            value: TValue;
	        };
	    }, value: TValue) => void;
	    onClose?: () => void;
	    onMouseEnter?: (evt: SyntheticMouseEvent<HTMLElement>) => void;
	    onMouseLeave?: (evt: SyntheticMouseEvent<HTMLElement>) => void;
	    onMouseOver?: (evt: SyntheticMouseEvent<HTMLElement>) => void;
	    onOpen?: () => void;
	    placeholder?: React$Node;
	    renderItem?: (value: TValue, item?: TItem) => React$Node;
	    renderValue?: (value: TValue, item?: TItem) => React$Node;
	    areValuesEqual?: (value1: TValue, value2: TValue) => boolean;
	    search?: boolean;
	    value?: TValue;
	    width?: number | string;
	    warning?: boolean;
	    use?: ButtonUse;
	    size?: ButtonSize;
	};
    declare export default class Select<TValue = {}, TItem = {}> extends React$Component<$Exact<SelectProps<TValue, TItem>>, void> {}
}

declare module "retail-ui/components/ScrollContainer" {
    declare type ScrollContainerProps = {
        children?: React$Node,
        invert?: boolean,
        maxHeight?: string | number,
        preventWindowScroll?: boolean,
    };
    declare export default class ScrollContainer extends React$Component<$Exact<ScrollContainerProps>, void> {}
}

declare module "retail-ui/components/Spinner" {
    declare type SpinnerProps = {
        caption?: React$Node,
        dimmed?: boolean,
        type?: SpinnerType,
    };
    declare export default class Spinner extends React$Component<$Exact<SpinnerProps>, void> {}
}

declare module "retail-ui/components/Sticky" {
    declare type StickyProps = {
        allowChildWithMargins?: boolean,
        children?: React$Node | ((fixed: boolean) => React$Node),
        getStop?: () => ?HTMLElement,
        offset?: number,
        side: "top" | "bottom",
    };
    declare export default class Sticky extends React$Component<$Exact<StickyProps>, void> {}
}

declare module "retail-ui/components/Tabs" {
    declare type TabsProps = {
        children?: React$Node,
        value: string,
        onChange?: (evt: $Exact<{ target: $Exact<{ value: string }> }>, value: string) => void,
    };
    declare type TabProps = {
        children?: React$Node,
        id?: string,
        style?: Object,
    };
    declare export default class Tabs extends React$Component<$Exact<TabsProps>, void> {
        static Tab: Class<React$Component<$Exact<TabProps>, void>>;
    }
}

declare module "retail-ui/components/Textarea" {
    declare type TextareaProps = {
        onChange?: (evt: SyntheticEvent<HTMLTextAreaElement>, value: string) => void,
        value?: string,
        width?: string | number,
    };
    declare export default class Textarea extends React$Component<$Exact<TextareaProps>, void> {}
}

declare module "retail-ui/components/Toggle" {
    declare type ToggleProps = {
        checked?: boolean,
        onChange?: (checked: boolean) => void | Promise<void>,
    };
    declare export default class Toggle extends React$Component<$Exact<ToggleProps>, void> {}
}

declare module "retail-ui/components/Tooltip" {
    declare type TooltipProps = {
        children?: React$Node,
        closeButton?: boolean,
        pos: PopupPosition,
        render: () => React$Node | null,
        trigger: "hover" | "click" | "focus" | "opened" | "closed" | "hoverAnchor",
    };
    declare export default class Tooltip extends React$Component<$Exact<TooltipProps>, void> {}
}
